"""
A level-order traversal, also known as a breadth-first search, visits each level of a tree's nodes from left to right, top to bottom. 
You are given a pointer, root, pointing to the root of a binary search tree. 
Complete the levelOrder function provided in your editor so that it prints the level-order traversal of the binary search tree.

Hint: You'll find a queue helpful in completing this challenge.
"""

import sys

class Node:
    def __init__(self,data):
        self.right=self.left=None
        self.data = data
class Solution:
    def insert(self,root,data):
        if root==None:
            return Node(data)
        else:
            if data<=root.data:
                cur=self.insert(root.left,data)
                root.left=cur
            else:
                cur=self.insert(root.right,data)
                root.right=cur
        return root

    def levelOrder(self,root):
        queue = [root]
        for root in queue:
            #Check if root.right or root.left that is added to the queue is None.
            #"None" will fail the if root test. Thus, it only prints those with values added.
            if root:
                print(root.data, end=" ")
                queue.append(root.left)
                queue.append(root.right)
                #these 2 .append() will keep increasing the size of the list. Whenever there both None and valid values will be added.
                #This will continue running until they hit the end of the list that ends with 'None'
                #In this example, I will have 13 items in the end
            

T=int(input())
myTree=Solution()
root=None
for i in range(T):
    data=int(input())
    root=myTree.insert(root,data)
myTree.levelOrder(root)
